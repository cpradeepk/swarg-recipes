
'use server';

import { z } from 'zod';
import type { RecipeFormData } from '@/lib/schemas/recipeSchemas';
import { RecipeFormSchema } from '@/lib/schemas/recipeSchemas';
import { addRecipe as addRecipeToDb } from '@/lib/mockData'; // Renamed to indicate it's now DB-backed
import type { Recipe, Ingredient, RecipeStep, NutritionalInfo } from '@/types';

// ID generation is now handled within addRecipeToDb or by the database itself.

export async function createRecipeAction(
  data: RecipeFormData
): Promise<{ success: boolean; message: string; recipeId?: string }> {
  try {
    const validatedData = RecipeFormSchema.parse(data);

    // Map form data to the structure expected by the database-backed addRecipe function
    const recipeToCreate: Omit<Recipe, 'id' | 'createdAt' | 'updatedAt'> = {
      name: validatedData.name,
      category: validatedData.category,
      description: validatedData.description || undefined,
      imageUrl: validatedData.imageUrl || undefined,
      aiHint: validatedData.aiHint || undefined,
      visibility: validatedData.visibility,
      prepTime: validatedData.prepTime || undefined,
      cookTime: validatedData.cookTime || undefined,
      totalTime: validatedData.totalTime || undefined,
      servings: validatedData.servings,
      nutritionalInfoPerServing: validatedData.nutritionalInfoPerServing ? {
        calories: validatedData.nutritionalInfoPerServing.calories,
        protein: validatedData.nutritionalInfoPerServing.protein,
        fat: validatedData.nutritionalInfoPerServing.fat,
        carbs: validatedData.nutritionalInfoPerServing.carbs,
      } : undefined,
      ingredients: validatedData.ingredients.map((ing, index) => ({
        // id is generated by DB or addRecipeToDb
        // Temporary client-side id for react-hook-form is not needed here.
        id: '', // Will be ignored or regenerated by the DB service
        name: ing.name,
        quantity: ing.quantity,
        unit: ing.unit,
        imageUrl: ing.imageUrl || undefined,
        aiHint: ing.aiHint || undefined,
        item_order: index, // Add item_order for ingredients
      })),
      steps: validatedData.steps.map((step, index) => ({
        // id is generated by DB or addRecipeToDb
        id: '', // Will be ignored or regenerated by the DB service
        stepNumber: index + 1,
        instruction: step.instruction,
        imageUrl: step.imageUrl || undefined,
        aiHint: step.aiHint || undefined,
        timerInSeconds: step.timerInSeconds,
        temperature: step.temperature || undefined,
      })),
    };

    const createdRecipe = await addRecipeToDb(recipeToCreate);

    return { success: true, message: 'Recipe created successfully!', recipeId: createdRecipe.id };
  } catch (error) {
    if (error instanceof z.ZodError) {
      console.error("Zod validation error in createRecipeAction:", error.errors);
      return { success: false, message: 'Validation failed. Please check your input.' };
    }
    console.error('Error creating recipe in action:', error);
    // Check if error has a message property
    const errorMessage = (error instanceof Error && error.message) ? error.message : 'An unexpected error occurred while creating the recipe.';
    return { success: false, message: errorMessage };
  }
}
